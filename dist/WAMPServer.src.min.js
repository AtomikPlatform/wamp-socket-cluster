(function webpackUniversalModuleDefinition(root, factory) {
	if(typeof exports === 'object' && typeof module === 'object')
		module.exports = factory(require("jsonschema"));
	else if(typeof define === 'function' && define.amd)
		define("wampSocketCluster", ["jsonschema"], factory);
	else if(typeof exports === 'object')
		exports["wampSocketCluster"] = factory(require("jsonschema"));
	else
		root["wampSocketCluster"] = factory(root["jsonschema"]);
})(this, function(__WEBPACK_EXTERNAL_MODULE_1__) {
return /******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId])
/******/ 			return installedModules[moduleId].exports;
/******/
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// identity function for calling harmony imports with the correct context
/******/ 	__webpack_require__.i = function(value) { return value; };
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, {
/******/ 				configurable: false,
/******/ 				enumerable: true,
/******/ 				get: getter
/******/ 			});
/******/ 		}
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = 4);
/******/ })
/************************************************************************/
/******/ ([
/* 0 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


module.exports.WAMPResultSchema = {
	id: '/WAMPRequest',
	type: 'object',
	properties: {
		type: { type: 'string' },
		procedure: { type: 'string' },
		data: {},
		success: { type: 'boolean' }
	},
	required: ['type', 'procedure', 'success']
};

module.exports.WAMPCallSchema = {
	id: '/WAMPCall',
	type: 'object',
	properties: {
		type: { type: 'string' },
		procedure: { type: 'string' },
		data: {}
	},
	required: ['type', 'procedure']
};

/***/ }),
/* 1 */
/***/ (function(module, exports) {

module.exports = require("jsonschema");

/***/ }),
/* 2 */,
/* 3 */,
/* 4 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var Validator = __webpack_require__(1).Validator;

var WAMPResultSchema = __webpack_require__(0).WAMPResultSchema;
var WAMPCallSchema = __webpack_require__(0).WAMPCallSchema;

var v = new Validator();

var WAMPServer = function () {
	function WAMPServer() {
		_classCallCheck(this, WAMPServer);

		this.registeredEnpoints = {};
	}

	_createClass(WAMPServer, [{
		key: 'upgradeToWAMP',
		value: function upgradeToWAMP(socket) {
			var _this = this;

			socket.on('raw', function (request) {
				try {
					request = JSON.parse(request);
				} catch (ex) {
					return;
				}
				if (v.validate(request, WAMPCallSchema).valid && request.type === WAMPCallSchema.id) {
					_this.processWAMPRequest(request, socket);
				}
			});
			return socket;
		}
	}, {
		key: 'processWAMPRequest',
		value: function processWAMPRequest(request, socket) {
			var procedure = this.registeredEnpoints[request.procedure];
			if (procedure) {
				procedure(request.data, function (err, data) {
					socket.send(JSON.stringify({
						success: !err,
						data: err ? err : data,
						type: WAMPResultSchema.id,
						procedure: request.procedure,
						signature: request.signature
					}));
				});
			} else {
				throw new Error('Attempt to call unregistered procedure ' + request.procedure);
			}
		}
	}, {
		key: 'addEndpoint',
		value: function addEndpoint(endpoint) {
			this.registeredEnpoints = Object.assign(this.registeredEnpoints, endpoint);
		}
	}, {
		key: 'reassignEndpoints',
		value: function reassignEndpoints(endpoints) {
			this.registeredEnpoints = endpoints;
		}
	}]);

	return WAMPServer;
}();

module.exports = WAMPServer;

/***/ })
/******/ ]);
});