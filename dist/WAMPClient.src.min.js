(function webpackUniversalModuleDefinition(root, factory) {
	if(typeof exports === 'object' && typeof module === 'object')
		module.exports = factory(require("jsonschema"), require("lodash.get"));
	else if(typeof define === 'function' && define.amd)
		define("wampSocketCluster", ["jsonschema", "lodash.get"], factory);
	else if(typeof exports === 'object')
		exports["wampSocketCluster"] = factory(require("jsonschema"), require("lodash.get"));
	else
		root["wampSocketCluster"] = factory(root["jsonschema"], root["lodash.get"]);
})(this, function(__WEBPACK_EXTERNAL_MODULE_1__, __WEBPACK_EXTERNAL_MODULE_2__) {
return /******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId])
/******/ 			return installedModules[moduleId].exports;
/******/
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// identity function for calling harmony imports with the correct context
/******/ 	__webpack_require__.i = function(value) { return value; };
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, {
/******/ 				configurable: false,
/******/ 				enumerable: true,
/******/ 				get: getter
/******/ 			});
/******/ 		}
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = 3);
/******/ })
/************************************************************************/
/******/ ([
/* 0 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


module.exports.WAMPResultSchema = {
	id: '/WAMPRequest',
	type: 'object',
	properties: {
		type: { type: 'string' },
		procedure: { type: 'string' },
		data: {},
		success: { type: 'boolean' }
	},
	required: ['type', 'procedure', 'success']
};

module.exports.WAMPCallSchema = {
	id: '/WAMPCall',
	type: 'object',
	properties: {
		type: { type: 'string' },
		procedure: { type: 'string' },
		data: {}
	},
	required: ['type', 'procedure']
};

/***/ }),
/* 1 */
/***/ (function(module, exports) {

module.exports = require("jsonschema");

/***/ }),
/* 2 */
/***/ (function(module, exports) {

module.exports = require("lodash.get");

/***/ }),
/* 3 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var get = __webpack_require__(2);
var Validator = __webpack_require__(1).Validator;

var WAMPResultSchema = __webpack_require__(0).WAMPResultSchema;
var WAMPCallSchema = __webpack_require__(0).WAMPCallSchema;

var v = new Validator();

function WAMPClient() {
	var _this = this;

	/**
  * @return {number}
  */
	this.MAX_CALLS_ALLOWED = 1000;

	this.callsResolvers = {};

	/**
  * @param {object} socket
  * @returns {object} wampSocket
  */
	this.upgradeToWAMP = function (socket) {
		socket.on('raw', function (result) {
			if (v.validate(result, WAMPResultSchema).valid && result.type === WAMPResultSchema.id) {
				var resolvers = get(_this.callsResolvers, result.procedure + '.' + result.signature);
				if (resolvers) {
					result.success ? resolvers.success(result.data) : resolvers.fail(result.data);
				} else {
					throw new Error('Unable to find resolving function for procedure ' + result.procedure + ' with signature ' + result.signature);
				}
			}
		});

		socket.wampSend = function (procedure, data) {
			return new Promise(function (success, fail) {
				if (!_this.callsResolvers[procedure]) {
					_this.callsResolvers[procedure] = {};
				}
				if (Object.keys(_this.callsResolvers[procedure]).length >= WAMPClient.MAX_CALLS_ALLOWED) {
					return fail('No more than ' + WAMPClient.MAX_CALLS_ALLOWED + ' calls allowed');
				}
				var signature = Object.keys(_this.callsResolvers[procedure]).length - 1 + 1;
				_this.callsResolvers[procedure][signature] = { success: success, fail: fail };
				socket.send(JSON.stringify({ signature: signature, procedure: procedure, type: WAMPCallSchema.id, data: data }));
			});
		};
		return socket;
	};
}

module.exports = WAMPClient;

/***/ })
/******/ ]);
});